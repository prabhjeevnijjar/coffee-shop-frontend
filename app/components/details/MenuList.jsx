'use client';

import { Fragment, useState } from 'react';
import MenuCard from './MenuCard';
import { menuItemCategories } from '@/utils/config';

const MenuList = ({ menuItems }) => {
  const [isSelected, setIsSelected] = useState('coffee');

  return (
    <div className="mt-12">
      <div className="flex flex-row gap-12">
        <div
          className={`flex flex-col items-center gap-3 hover:cursor-pointer p-6 ${isSelected === menuItemCategories.coffee ? 'bg-customSeaFoam rounded-[20px]' : ''}`}
          onClick={() => setIsSelected(menuItemCategories.coffee)}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="black"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
            className="feather feather-coffee"
          >
            <path d="M18 8h1a4 4 0 0 1 0 8h-1"></path>
            <path d="M2 8h16v9a4 4 0 0 1-4 4H6a4 4 0 0 1-4-4V8z"></path>
            <line x1="6" y1="1" x2="6" y2="4"></line>
            <line x1="10" y1="1" x2="10" y2="4"></line>
            <line x1="14" y1="1" x2="14" y2="4"></line>
          </svg>
          <span className="text-[18px] font-semibold leading-[21.23px]">Coffee</span>
        </div>
        <div
          className={`flex flex-col items-center gap-3 hover:cursor-pointer p-6 ${isSelected === menuItemCategories.drinks ? 'bg-customSeaFoam rounded-[20px]' : ''}`}
          onClick={() => setIsSelected(menuItemCategories.drinks)}
        >
          <svg width="20" height="24" viewBox="0 0 20 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path
              d="M19.341 5.125C19.0608 4.77324 18.7046 4.48935 18.2993 4.29454C17.8939 4.09973 17.4497 3.99905 17 4H12.673L12.8 2.89C12.827 2.646 12.9428 2.42045 13.1254 2.25632C13.3079 2.0922 13.5445 2.00097 13.79 2H18C18.2652 2 18.5196 1.89464 18.7071 1.70711C18.8946 1.51957 19 1.26522 19 1C19 0.734784 18.8946 0.48043 18.7071 0.292893C18.5196 0.105357 18.2652 0 18 0L13.79 0C13.0518 0.000168296 12.3395 0.272519 11.7896 0.764943C11.2396 1.25737 10.8904 1.93529 10.809 2.669L10.661 4H3C2.56038 4.00408 2.12696 4.10409 1.73001 4.29305C1.33306 4.482 0.982147 4.75535 0.70179 5.09399C0.421433 5.43262 0.218391 5.82839 0.106848 6.25363C-0.00469565 6.67888 -0.0220504 7.12335 0.0559958 7.556L1.568 19.622C1.7212 20.8302 2.3094 21.9411 3.22254 22.747C4.13567 23.5528 5.31115 23.9982 6.529 24H13.47C14.6881 23.998 15.8637 23.5524 16.7769 22.7464C17.6902 21.9404 18.2786 20.8294 18.432 19.621L19.932 7.653C20.0304 7.21433 20.0284 6.75908 19.926 6.32131C19.8237 5.88354 19.6237 5.47457 19.341 5.125ZM17 6C17.15 5.99994 17.298 6.03362 17.4332 6.09853C17.5684 6.16344 17.6873 6.25793 17.781 6.375C17.8814 6.50662 17.9499 6.65979 17.9809 6.8224C18.012 6.98502 18.0048 7.15263 17.96 7.312L17.622 10H12.006L12.451 6H17ZM2.221 6.374C2.31461 6.25738 2.4332 6.16324 2.56801 6.09851C2.70283 6.03379 2.85045 6.00012 3 6H10.437L9.992 10H2.374L2.024 7.216C1.99122 7.06988 1.99191 6.91824 2.02603 6.77243C2.06014 6.62662 2.1268 6.49041 2.221 6.374ZM16.447 19.374C16.3548 20.0988 16.0018 20.7652 15.4538 21.2486C14.9059 21.7319 14.2006 21.999 13.47 22H6.529C5.79822 21.9999 5.09263 21.733 4.54468 21.2495C3.99673 20.766 3.6441 20.0991 3.553 19.374L2.626 12H17.371L16.447 19.374ZM11.438 15.11L10.994 19.11C10.9796 19.2405 10.9395 19.3669 10.8762 19.482C10.8129 19.5971 10.7276 19.6986 10.6251 19.7806C10.5226 19.8627 10.4049 19.9238 10.2788 19.9604C10.1526 19.997 10.0205 20.0084 9.89 19.994C9.75946 19.9796 9.63305 19.9395 9.51798 19.8762C9.40291 19.8129 9.30144 19.7276 9.21935 19.6251C9.13726 19.5226 9.07617 19.4049 9.03957 19.2788C9.00296 19.1526 8.99155 19.0205 9.006 18.89L9.45 14.89C9.48263 14.6277 9.61639 14.3885 9.8228 14.2234C10.0292 14.0583 10.2919 13.9803 10.555 14.006C10.8184 14.0354 11.0594 14.1682 11.225 14.3752C11.3906 14.5822 11.4672 14.8465 11.438 15.11Z"
              fill="black"
            />
          </svg>
          <span className="text-[18px] font-semibold leading-[21.23px]"> Drinks</span>{' '}
        </div>
        <div
          className={`flex flex-col items-center gap-3 hover:cursor-pointer p-6 ${isSelected === menuItemCategories.food ? 'bg-customSeaFoam rounded-[20px]' : ''}`}
          onClick={() => setIsSelected(menuItemCategories.food)}
        >
          <svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path
              d="M22.875 3.78503C21.3791 2.93354 19.7337 2.37714 18.028 2.14603C17.7698 1.6491 17.4104 1.21173 16.973 0.862028C16.502 0.487456 15.9519 0.224999 15.3644 0.0945367C14.7768 -0.0359252 14.1673 -0.0309697 13.582 0.109028C12.331 0.424701 11.1177 0.874298 9.96303 1.45003C9.14335 1.06031 8.2278 0.918108 7.32853 1.04084C6.42926 1.16357 5.5853 1.54591 4.90003 2.14103C4.53303 2.45603 4.16403 2.78503 3.80003 3.12403C3.41803 3.48303 3.02903 3.89103 2.64103 4.33403C2.15487 4.88984 1.80791 5.55334 1.62882 6.26973C1.44972 6.98611 1.44362 7.73482 1.61103 8.45403C1.68831 8.79353 1.80266 9.12351 1.95203 9.43803C1.37239 10.6009 0.919132 11.8225 0.600028 13.082C0.45943 13.6673 0.454173 14.2769 0.584657 14.8645C0.715141 15.4522 0.977929 16.0023 1.35303 16.473C1.70637 16.915 2.14946 17.277 2.65303 17.535C2.88474 19.2382 3.44078 20.8812 4.29103 22.375C4.62091 22.9676 5.13228 23.4387 5.74991 23.719C6.36753 23.9993 7.0588 24.074 7.72203 23.932C8.40808 23.7962 9.03222 23.4432 9.50223 22.9253C9.97223 22.4074 10.2632 21.752 10.332 21.056C10.5187 19.7687 10.857 18.5079 11.34 17.3C11.34 17.3 11.885 16.964 12.134 16.761C12.7336 16.2582 13.1591 15.5789 13.35 14.82C13.8124 14.667 14.2328 14.4085 14.578 14.065C14.9143 13.7227 15.1687 13.3087 15.322 12.854C16.0783 12.6622 16.7549 12.2371 17.256 11.639C17.456 11.39 17.796 10.844 17.796 10.844C19.0013 10.3481 20.2648 10.0077 21.556 9.83103C22.252 9.76216 22.9074 9.47123 23.4253 9.00123C23.9432 8.53122 24.2962 7.90708 24.432 7.22103C24.5763 6.55703 24.5027 5.86422 24.2223 5.24531C23.9418 4.6264 23.4694 4.11434 22.875 3.78503ZM8.33903 20.833C8.31496 21.1088 8.2017 21.3693 8.0164 21.575C7.83109 21.7807 7.58383 21.9204 7.31203 21.973C7.06192 22.0299 6.80003 22.003 6.56673 21.8964C6.33343 21.7898 6.14168 21.6094 6.02103 21.383C5.41963 20.3298 4.98863 19.188 4.74403 18H8.64403C8.75303 18 8.85903 17.978 8.96703 17.972C8.68103 18.855 8.33903 20.829 8.33903 20.833ZM10.869 15.207C10.2412 15.719 9.45614 15.999 8.64603 16H4.50003C4.19584 16.0007 3.8955 15.9319 3.62188 15.799C3.34826 15.6661 3.10856 15.4725 2.92103 15.233C2.73397 14.9987 2.60279 14.7247 2.53747 14.4321C2.47214 14.1394 2.47438 13.8357 2.54403 13.544C2.74423 12.7367 3.01184 11.9476 3.34403 11.185C3.65274 11.4266 3.99075 11.6282 4.35003 11.785L11.027 14.709C11.089 14.738 11.155 14.749 11.218 14.773C11.1285 14.9374 11.0103 15.0844 10.869 15.207ZM13.154 12.655C12.9869 12.8245 12.7714 12.9379 12.5372 12.9798C12.303 13.0217 12.0615 12.99 11.846 12.889L5.15303 9.95803C4.75397 9.78318 4.40216 9.51602 4.12659 9.17856C3.85102 8.8411 3.65958 8.44299 3.56803 8.01703C3.47097 7.60413 3.47349 7.17407 3.57538 6.76234C3.67727 6.35061 3.87561 5.96901 4.15403 5.64903C4.50003 5.25503 4.84203 4.89503 5.17703 4.58003C5.51203 4.26503 5.85903 3.95503 6.20403 3.66003C6.52242 3.38293 6.90165 3.1848 7.31095 3.08171C7.72025 2.97862 8.14809 2.97348 8.55975 3.0667C8.97141 3.15992 9.3553 3.34888 9.68025 3.61825C10.0052 3.88761 10.2621 4.2298 10.43 4.61703L13.394 11.307C13.4932 11.53 13.5233 11.7776 13.4806 12.0178C13.4378 12.258 13.3241 12.48 13.154 12.655ZM16.5 8.14603C16.4994 8.95603 16.2197 9.74107 15.708 10.369C15.5911 10.5044 15.4522 10.619 15.297 10.708C15.271 10.638 15.252 10.566 15.222 10.497L12.259 3.80803C12.1092 3.46842 11.9207 3.14728 11.697 2.85103C12.4558 2.51968 13.2408 2.25208 14.044 2.05103C14.3357 1.98123 14.6394 1.97891 14.9321 2.04425C15.2248 2.10958 15.4987 2.24084 15.733 2.42803C15.9731 2.61598 16.167 2.85632 16.2999 3.13068C16.4328 3.40504 16.5013 3.70616 16.5 4.01103V8.14603ZM22.473 6.81203C22.4204 7.08383 22.2807 7.33109 22.075 7.5164C21.8693 7.7017 21.6088 7.81496 21.333 7.83903C21.333 7.83903 19.355 8.18103 18.472 8.46903C18.479 8.36103 18.5 8.25503 18.5 8.14603V4.24603C19.688 4.49063 20.8298 4.92163 21.883 5.52303C22.1086 5.64397 22.2885 5.83545 22.395 6.06821C22.5016 6.30098 22.529 6.56222 22.473 6.81203Z"
              fill="black"
            />
          </svg>
          <span className="text-[18px] font-semibold leading-[21.23px]">Food</span>
        </div>
      </div>
      <div className="mt-10 px-2">
        {menuItems.length ? (
          <Fragment>
            {menuItems.map((item, index) => {
              if (item.category === isSelected) return <MenuCard item={item} key={index} />;
            })}
          </Fragment>
        ) : (
          <div>No items on menue</div>
        )}
        <Fragment>{!menuItems.filter((item) => item.category === isSelected)?.length ? <div>No items on menu</div> : null}</Fragment>
      </div>
    </div>
  );
};
export default MenuList;
